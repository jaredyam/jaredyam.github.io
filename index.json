[{"content":"最近打算将我在 CSDN 上发布并持续优化的部分内容同步至 GitHub，这些内容十分需要借助 Git 记录和追溯修改历史，而 GitHub 也可以作为这些内容的另一个获取平台。\n将文档直接丢进 GitHub 仓库好像又差点意思。GitHub Pages 为每个 GitHub 账户免费提供一项静态网站托管服务，通过域名 https://\u0026lt;your-github-id\u0026gt;.github.io 即可访问同名仓库托管的静态网站。借助这项服务，我们可以依托 GitHub 仓库搭建一个静态博客网站，将文档以博客形式开放展阅。\n本文将介绍如何使用 Hugo 搭建静态博客网站、使用和定制 hugo-PaperMod 主题以及将网站部署在 GitHub Pages。\n 搭建静态网站 如今搭建静态网站的方法已经非常成熟，我根据网友讨论和个人喜好选择 Hugo 作为静态网站搭建框架，同样流行的框架还包括 Hexo、Jekyll 等。\n安装 Hugo 框架 Hugo 提供多种操作系统的安装指引。以我的 macOS 系统为例，可以通过包管理器 brew 快速完成安装：\nbrew install hugo 创建网站模板 使用 Hugo 可以快速创建一个网站模板：\nbrew new site \u0026lt;your-github-id\u0026gt;.github.io -f yml 其中 \u0026lt;your-github-id\u0026gt;.github.io 对应新建网站的项目文件夹（\u0026lt;your-github-id\u0026gt; 需替换为 GitHub ID），选项 -f 将网站配置文件设置为 YAML 格式，其目的是为与下文主题配置保持一致。为方便起见，下文将网站项目文件夹简称为「网站」。\n配置基础主题 在流行框架的基础上搭建网站其实并不是一个技术活，千差万别的网站体验则主要体现在网站主题的设计上。Hugo 提供丰富多样的主题模板，我根据网友讨论选择 adityatelange/hugo-PaperMod 作为基础主题。PaperMod 页面简洁，支持暗黑模式及众多实用特性。\n在网站根目录执行以下命令下载主题并初始化为 Git 子模块：\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 git init git submodule--helper add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 随后，我们只需将主题名称写入配置文件 ./config.yml：\nbaseURL: \u0026#34;https://jaredyam.github.io\u0026#34; languageCode: \u0026#34;en-us\u0026#34; defaultContentLanguage: zh title: 👨‍🌾 Jared Yam # 主题 theme: \u0026#34;PaperMod\u0026#34; 便搭建完成了一个完整的静态博客网站。\n执行以下命令可以在本地预览网站：\nhugo server -D 其中选项 -D 允许在预览网站时渲染未发布的草稿文档。同时，我们还可以尝试新建一个文档：\nhugo new posts/quickstart.md 刷新并点击进入该文档对应的网页视图。\n除此之外，你还可以跟随主题配置指引，根据个人喜好调整主题基础设置，添加或取消部分功能。如果你没有其它定制主题的需求，可直接跳过下一节内容。\n定制基础主题 定制主题除了修改配置文件，还可以重写模板和风格。接下来介绍的个性化配置可能持续更新，且细节部分不做赘述。如果你对我的网站主题配置感兴趣，可以随时查看其对应的仓库源文件。\n ❓ 如何查看我在基础主题上做过哪些调整？\ngit clone https://github.com/jaredyam/jaredyam.github.io.git cat ./config.yml diff -ur themes/PaperMod/assets assets diff -ur themes/PaperMod/layouts layouts  转移目录至侧边栏 Pull Request #675 · adityatelange/hugo-PaperMod 提出将文章目录转移至侧边栏，可以轻松实现上下文跳转。由于这一特性还未并入主分支，我们可以让子模块追踪其远程 PR 分支：\ncd themes/PaperMod git fetch origin pull/675/head:toc-on-the-side --depth=1 git checkout toc-on-the-side cd ../.. 除了切换到 PR 分支，我们还需要让子模块配置文件 ./gitmodules 指向 PR 分支：\n[submodule \u0026#34;themes/PaperMod\u0026#34;] \tpath = themes/PaperMod url = https://github.com/nielsbrakel/hugo-PaperMod.git branch = \u0026#34;toc-on-the-side\u0026#34; 然后再同步子模块 URL 到 .git/config：\ngit submodule sync 基础主题默认不显示目录栏，我们需要在主题配置文件 ./config.yml 中启用并展开目录：\nbaseURL: \u0026#34;https://jaredyam.github.io\u0026#34; languageCode: \u0026#34;en-us\u0026#34; defaultContentLanguage: zh title: 👨‍🌾 Jared Yam # 主题 theme: \u0026#34;PaperMod\u0026#34;  params:  # 目录  ShowToc: true  TocOpen: true 值得注意的是，远程 PR 分支可能并不涵盖主分支的最新特性。你可以通过创建一个 fork 仓库同时追踪主分支和 PR 分支的更新。\n添加评论区 utterances 是一个基于 GitHub issues 的评论系统，包含多种主题可供选择。你应该首先跟随 utterances 配置方法，了解相关设置并根据个人喜好生成一份包含属性描述的 HTML 代码：\n\u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34;  repo=\u0026#34;jaredyam/jaredyam.github.io\u0026#34;  issue-term=\u0026#34;title\u0026#34;  label=\u0026#34;Comment\u0026#34;  theme=\u0026#34;github-light\u0026#34;  crossorigin=\u0026#34;anonymous\u0026#34;  async\u0026gt; \u0026lt;/script\u0026gt; 官方提供的自动生成代码仅支持设置一个固定主题，而我们希望网站主题和评论区主题亮暗模式可以保持同步。参照 Issue #427 · utterance/utterances 的讨论，上述代码可以修改为：\n\u0026lt;div class=\u0026#34;comments\u0026#34;\u0026gt;  \u0026lt;script\u0026gt;  function loadComment() {  let theme = localStorage.getItem(\u0026#39;pref-theme\u0026#39;) === \u0026#39;dark\u0026#39; ? \u0026#39;github-dark\u0026#39; : \u0026#39;github-light\u0026#39;;  let s = document.createElement(\u0026#39;script\u0026#39;);  s.src = \u0026#39;https://utteranc.es/client.js\u0026#39;;  s.setAttribute(\u0026#39;repo\u0026#39;, \u0026#39;{{- .Site.Params.commentsParams.repo -}}\u0026#39;);  s.setAttribute(\u0026#39;issue-term\u0026#39;, \u0026#39;{{- .Site.Params.commentsParams.issueTerm -}}\u0026#39;);  s.setAttribute(\u0026#39;label\u0026#39;, \u0026#39;{{- .Site.Params.commentsParams.label -}}\u0026#39;);  s.setAttribute(\u0026#39;theme\u0026#39;, theme);  s.setAttribute(\u0026#39;crossorigin\u0026#39;, \u0026#39;anonymous\u0026#39;);  s.setAttribute(\u0026#39;async\u0026#39;, \u0026#39;\u0026#39;);  document.querySelector(\u0026#39;div.comments\u0026#39;).innerHTML = \u0026#39;\u0026#39;;  document.querySelector(\u0026#39;div.comments\u0026#39;).appendChild(s);  }  loadComment();  \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; 将修改后的代码写入 ./layouts/partials/comments.html 即可。\n不难看出，我们还需要在主题配置文件 ./config.yml 中添加评论区参数：\nbaseURL: \u0026#34;https://jaredyam.github.io\u0026#34; languageCode: \u0026#34;en-us\u0026#34; defaultContentLanguage: zh title: 👨‍🌾 Jared Yam # 主题 theme: \u0026#34;PaperMod\u0026#34;  params:  # 目录  ShowToc: true  TocOpen: true  # 评论区  comments: true  commentsParams:  repo: \u0026#34;jaredyam/jaredyam.github.io\u0026#34;  issueTerm: \u0026#34;title\u0026#34;  label: \u0026#34;Comment\u0026#34; 其中 repo，issue-term，label 的属性值应当与自动生成代码保持一致。\n除了在加载网站时使其主题和评论区亮暗模式保持一致外，手动切换网站主题亮暗模式的同时也应该改变评论区主题。在 ./layouts/partials/footer.html:72 区域加入如下代码块：\n{{- if (not .Site.Params.disableThemeToggle) }} \u0026lt;script\u0026gt;  document.getElementById(\u0026#34;theme-toggle\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; {  if (document.body.className.includes(\u0026#34;dark\u0026#34;)) {  document.body.classList.remove(\u0026#39;dark\u0026#39;);  localStorage.setItem(\u0026#34;pref-theme\u0026#34;, \u0026#39;light\u0026#39;); + const message = { + type: \u0026#39;set-theme\u0026#39;, + theme: \u0026#39;github-light\u0026#39; + }; + const iframe = document.querySelector(\u0026#39;.utterances-frame\u0026#39;); + iframe.contentWindow.postMessage(message, \u0026#39;https://utteranc.es\u0026#39;);  } else {  document.body.classList.add(\u0026#39;dark\u0026#39;);  localStorage.setItem(\u0026#34;pref-theme\u0026#34;, \u0026#39;dark\u0026#39;); + const message = { + type: \u0026#39;set-theme\u0026#39;, + theme: \u0026#39;github-dark\u0026#39; + }; + const iframe = document.querySelector(\u0026#39;.utterances-frame\u0026#39;); + iframe.contentWindow.postMessage(message, \u0026#39;https://utteranc.es\u0026#39;);  }  }) \u0026lt;/script\u0026gt; {{- end }} 即可实现这一目的。\n部署网站服务 Hugo 提供非常详尽的 GitHub Pages 部署指引。这里对部署过程做简单梳理：\n 在 ./.github/workflows/ 中放入 gh-pages.yml； 将本地网站同步到 GitHub 同名仓库； 在仓库设置 Settings -\u0026gt; Pages 中选择 gh-pages 作为网站资源分支。  完成以上步骤，你便可以通过 https://\u0026lt;your-github-id\u0026gt;.github.io 访问自己的个人博客。\n","permalink":"https://jaredyam.github.io/posts/build-and-deploy-a-static-blog-website-with-hugo-and-github-pages/","summary":"最近打算将我在 CSDN 上发布并持续优化的部分内容同步至 GitHub，这些内容十分需要借助 Git 记录和追溯修改历史，而 GitHub 也可以作为这些内容的另一个获取平台。\n将文档直接丢进 GitHub 仓库好像又差点意思。GitHub Pages 为每个 GitHub 账户免费提供一项静态网站托管服务，通过域名 https://\u0026lt;your-github-id\u0026gt;.github.io 即可访问同名仓库托管的静态网站。借助这项服务，我们可以依托 GitHub 仓库搭建一个静态博客网站，将文档以博客形式开放展阅。\n本文将介绍如何使用 Hugo 搭建静态博客网站、使用和定制 hugo-PaperMod 主题以及将网站部署在 GitHub Pages。\n 搭建静态网站 如今搭建静态网站的方法已经非常成熟，我根据网友讨论和个人喜好选择 Hugo 作为静态网站搭建框架，同样流行的框架还包括 Hexo、Jekyll 等。\n安装 Hugo 框架 Hugo 提供多种操作系统的安装指引。以我的 macOS 系统为例，可以通过包管理器 brew 快速完成安装：\nbrew install hugo 创建网站模板 使用 Hugo 可以快速创建一个网站模板：\nbrew new site \u0026lt;your-github-id\u0026gt;.github.io -f yml 其中 \u0026lt;your-github-id\u0026gt;.github.io 对应新建网站的项目文件夹（\u0026lt;your-github-id\u0026gt; 需替换为 GitHub ID），选项 -f 将网站配置文件设置为 YAML 格式，其目的是为与下文主题配置保持一致。为方便起见，下文将网站项目文件夹简称为「网站」。\n配置基础主题 在流行框架的基础上搭建网站其实并不是一个技术活，千差万别的网站体验则主要体现在网站主题的设计上。Hugo 提供丰富多样的主题模板，我根据网友讨论选择 adityatelange/hugo-PaperMod 作为基础主题。PaperMod 页面简洁，支持暗黑模式及众多实用特性。","title":"使用 Hugo 和 GitHub Pages 搭建并部署一个静态博客网站"}]